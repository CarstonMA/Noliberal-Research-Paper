knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(readr)
library(readxl)
library(dplyr)
library(tidyr)
library(countrycode)
# Load Heritage Data
heritage <- read_csv("Heritage.csv", show_col_types = FALSE) %>%
rename(Country = name_web, Year = Year, Heritage_Score = Overall, Region = region) %>%
select(Country, Year, Heritage_Score, `Property Rights`, `Government Integrity`,
`Judicial Effectiveness`, `Tax Burden`, `Government Spending`, `Fiscal Health`,
`Business Freedom`, `Labor Freedom`, `Monetary Freedom`, `Trade Freedom`,
`Investment Freedom`, `Financial Freedom`, Region)
# Convert "N/A" text values to NA
heritage <- heritage %>%
mutate(across(where(is.character), ~ na_if(., "N/A")))
# Load necessary libraries
library(readr)
library(readxl)
library(dplyr)
library(tidyr)
library(countrycode)
# Load Heritage Data
heritage <- read_csv("Heritage.csv", show_col_types = FALSE) %>%
rename(Country = name_web, Year = Year, Heritage_Score = Overall, Region = region) %>%
select(Country, Year, Heritage_Score, `Property Rights`, `Government Integrity`,
`Judicial Effectiveness`, `Tax Burden`, `Government Spending`, `Fiscal Health`,
`Business Freedom`, `Labor Freedom`, `Monetary Freedom`, `Trade Freedom`,
`Investment Freedom`, `Financial Freedom`, Region)
# Convert "N/A" text values to NA
heritage <- heritage %>%
mutate(across(where(is.character), ~ na_if(., "N/A")))
# Load fraser Data
fraser_aggregate <- read_excel("fraser.xlsx", sheet = "EFW Panel Data 2024 Report") %>%
rename(Country = Countries, Year = Year,
fraser_Score = Summary,
Size_of_Government = `Area 1`,
Legal_System_and_Property = `Area 2`,
Sound_Money = `Area 3`,
Free_Trade = `Area 4`,
Regulation = `Area 5`) %>%
select(Country, Year, fraser_Score,
Size_of_Government, Legal_System_and_Property,
Sound_Money, Free_Trade, Regulation)
# Import the entire file, using row 5 as column names (skip first 4 rows)
fraser_component <- read_excel("Fraser.xlsx", sheet = "EFW Data 2024 Report", skip = 4)
# Manually assign ISO3 codes for Kosovo and Micronesia **before merging**
manual_iso3 <- c(
"kosovo" = "XKX",      # Kosovo's ISO3 code
"micronesia" = "FSM"   # Micronesia's ISO3 code
)
heritage <- heritage %>%
mutate(ISO3 = ifelse(Country %in% names(manual_iso3), manual_iso3[Country],
countrycode(Country, "country.name", "iso3c")))
fraser_aggregate <- fraser_aggregate %>%
mutate(ISO3 = ifelse(Country %in% names(manual_iso3), manual_iso3[Country],
countrycode(Country, "country.name", "iso3c")))
# Merge using standardized ISO3 codes
merged_data <- full_join(heritage, fraser_aggregate, by = c("ISO3", "Year"))
# Ensure Fraser's country names are used unless NA
merged_data <- merged_data %>%
mutate(Country = coalesce(Country.y, Country.x)) %>%  # Use Fraser's names unless NA
select(ISO3, Country, Year, everything(), -Country.x, -Country.y)  # Reorder columns
# Remove columns with "Rank", "Data", or "Area" in the header
fraser_cleaned <- fraser_component %>%
select(-matches("(?i)Rank|Data|Area|2|Quartile"))  # Case-insensitive match
knitr::opts_chunk$set(echo = TRUE)
View(merged_data)
knitr::opts_chunk$set(echo = FALSE)  # Default: do not show code unless overridden
library(readr)
library(readxl)
library(dplyr)
library(tidyr)
library(countrycode)
# Identify year columns dynamically
year_columns <- names(wdi_data)[grepl("^[0-9]{4} \\[YR[0-9]{4}\\]$", names(wdi_data))]
# Identify year columns dynamically
year_columns <- names(wdi_data)[grepl("^[0-9]{4} \\[YR[0-9]{4}\\]$", names(wdi_data))]
# Identify year columns dynamically
year_columns <- names(wdi_data)[grepl("^[0-9]{4} \\[YR[0-9]{4}\\]$", names(wdi_data))]
# Identify year columns dynamically
year_columns <- names(wdi_data)[grepl("^[0-9]{4} \\[YR[0-9]{4}\\]$", names(wdi_data))]
# Identify year columns dynamically
year_columns <- names(wdi_data)[grepl("^[0-9]{4} \\[YR[0-9]{4}\\]$", names(wdi_data))]
# Identify year columns dynamically
year_columns <- names(wdi_data)[grepl("^[0-9]{4} \\[YR[0-9]{4}\\]$", names(wdi_data))]
# Identify year columns dynamically
year_columns <- names(wdi_data)[grepl("^[0-9]{4} \\[YR[0-9]{4}\\]$", names(wdi_data))]
# Identify year columns dynamically
year_columns <- names(wdi_data)[grepl("^[0-9]{4} \\[YR[0-9]{4}\\]$", names(wdi_data))]
# Identify columns with year data (format: "YYYY [YRYYYY]")
year_columns <- names(wdi_data)[
grepl("^[0-9]{4} \\[YR[0-9]{4}\\]$", names(wdi_data))
]
knitr::opts_chunk$set(echo = FALSE)  # Default: do not show code unless overridden
library(readr)
library(readxl)
library(dplyr)
library(tidyr)
library(countrycode)
heritage <- read_csv("Heritage.csv", show_col_types = FALSE) %>%
rename(Country = name_web, Year = Year, Heritage_Score = Overall, Region = region) %>%
select(Country, Year, Heritage_Score, `Property Rights`, `Government Integrity`,
`Judicial Effectiveness`, `Tax Burden`, `Government Spending`, `Fiscal Health`,
`Business Freedom`, `Labor Freedom`, `Monetary Freedom`, `Trade Freedom`,
`Investment Freedom`, `Financial Freedom`)
fraser_aggregate <- read_excel("fraser.xlsx", sheet = "EFW Panel Data 2024 Report") %>%
rename(Country = Countries, Year = Year,
fraser_Score = Summary,
Size_of_Government = `Area 1`,
Legal_System_and_Property = `Area 2`,
Sound_Money = `Area 3`,
Free_Trade = `Area 4`,
Regulation = `Area 5`) %>%
select(Country, Year, fraser_Score,
Size_of_Government, Legal_System_and_Property,
Sound_Money, Free_Trade, Regulation)
heritage$ISO3 <- countrycode(heritage$Country, "country.name", "iso3c")
fraser_aggregate$ISO3 <- countrycode(fraser_aggregate$Country, "country.name", "iso3c")
merged_index_data <- full_join(heritage, fraser_aggregate, by = c("ISO3", "Year")) %>%
mutate(Country = coalesce(Country.y, Country.x)) %>%
select(ISO3, Country, Year, everything(), -Country.x, -Country.y)
wdi_data <- read_csv("10115ced-732d-4788-9075-d31041264141_Data.csv", show_col_types = FALSE)
year_columns <- names(wdi_data)[grepl("^[0-9]{4} \\[YR[0-9]{4}\\]$", names(wdi_data))]
if (length(year_columns) == 0) {
stop("No year columns found. Please check dataset structure.")
}
# Identify columns with year data (format: "YYYY [YRYYYY]")
year_columns <- names(wdi_data)[
grepl("^[0-9]{4} \\[YR[0-9]{4}\\]$", names(wdi_data))
]
# Convert to "tidy" format by gathering year columns into a long format
wdi_tidy <- wdi_data %>%
pivot_longer(
cols = all_of(year_columns),  # Use detected year columns
names_to = "Year",
values_to = "Value"
) %>%
# Remove the pattern " [YRYYYY]" from Year and convert to numeric
mutate(Year = as.numeric(gsub(" \\[YR[0-9]{4}\\]", "", Year))) %>%
# Keep only rows with valid years
filter(!is.na(Year)) %>%
# Replace missing data indicator ".." with NA
mutate(Value = na_if(Value, ".."))
# Aggregate duplicate values before pivoting to wide format
wdi_tidy <- wdi_tidy %>%
group_by(`Country Name`, `Country Code`, Year, `Series Name`) %>%
summarise(Value = mean(as.numeric(Value), na.rm = TRUE), .groups = "drop")
# Reshape the data into wide format: one row per Country-Year,
# and each indicator (Series Name) as a separate column
wdi_tidy <- wdi_tidy %>%
pivot_wider(
names_from = `Series Name`,
values_from = Value,
values_fn = mean
) %>%
# Replace any remaining missing data markers for character columns
mutate(across(where(is.character), ~ na_if(., ".."))) %>%
mutate(across(where(is.character), ~ na_if(., ""))) %>%
# Convert NaN values to NA in numeric columns
mutate(across(where(is.numeric), ~ ifelse(is.nan(.), NA, .)))
# Remove columns that consist entirely of NA values
wdi_tidy <- wdi_tidy %>%
select(where(~ !all(is.na(.))))
View(wdi_tidy)
# Export the merged economic data to CSV
write_csv(merged_index_data, "merged_index_data.csv")
# Export the tidy WDI data to CSV
write_csv(wdi_tidy, "wdi_tidy.csv")
knitr::opts_chunk$set(echo = FALSE)  # Default: do not show code unless overridden
library(readr)
library(readxl)
library(dplyr)
library(tidyr)
library(countrycode)
heritage <- read_csv("Heritage.csv", show_col_types = FALSE) %>%
rename(Country = name_web, Year = Year, Heritage_Score = Overall, Region = region) %>%
select(Country, Year, Heritage_Score, `Property Rights`, `Government Integrity`,
`Judicial Effectiveness`, `Tax Burden`, `Government Spending`, `Fiscal Health`,
`Business Freedom`, `Labor Freedom`, `Monetary Freedom`, `Trade Freedom`,
`Investment Freedom`, `Financial Freedom`)
# Merge the economic data with the WDI data on ISO3 and Year
merged_data <- full_join(merged_index_data, wdi_tidy, by = c("ISO3", "Year"))
heritage <- read_csv("Heritage.csv", show_col_types = FALSE) %>%
rename(Country = name_web, Year = Year, Heritage_Score = Overall, Region = region) %>%
select(Country, Year, Heritage_Score, `Property Rights`, `Government Integrity`,
`Judicial Effectiveness`, `Tax Burden`, `Government Spending`, `Fiscal Health`,
`Business Freedom`, `Labor Freedom`, `Monetary Freedom`, `Trade Freedom`,
`Investment Freedom`, `Financial Freedom`)
fraser_aggregate <- read_excel("fraser.xlsx", sheet = "EFW Panel Data 2024 Report") %>%
rename(Country = Countries, Year = Year,
fraser_Score = Summary,
Size_of_Government = `Area 1`,
Legal_System_and_Property = `Area 2`,
Sound_Money = `Area 3`,
Free_Trade = `Area 4`,
Regulation = `Area 5`) %>%
select(Country, Year, fraser_Score,
Size_of_Government, Legal_System_and_Property,
Sound_Money, Free_Trade, Regulation)
heritage$ISO3 <- countrycode(heritage$Country, "country.name", "iso3c")
fraser_aggregate$ISO3 <- countrycode(fraser_aggregate$Country, "country.name", "iso3c")
merged_index_data <- full_join(heritage, fraser_aggregate, by = c("ISO3", "Year")) %>%
mutate(Country = coalesce(Country.y, Country.x)) %>%
select(ISO3, Country, Year, everything(), -Country.x, -Country.y)
wdi_data <- read_csv("10115ced-732d-4788-9075-d31041264141_Data.csv", show_col_types = FALSE)
year_columns <- names(wdi_data)[grepl("^[0-9]{4} \\[YR[0-9]{4}\\]$", names(wdi_data))]
if (length(year_columns) == 0) {
stop("No year columns found. Please check dataset structure.")
}
# Identify columns with year data (format: "YYYY [YRYYYY]")
year_columns <- names(wdi_data)[
grepl("^[0-9]{4} \\[YR[0-9]{4}\\]$", names(wdi_data))
]
# Convert to "tidy" format by gathering year columns into a long format
wdi_tidy <- wdi_data %>%
pivot_longer(
cols = all_of(year_columns),  # Use detected year columns
names_to = "Year",
values_to = "Value"
) %>%
# Remove the pattern " [YRYYYY]" from Year and convert to numeric
mutate(Year = as.numeric(gsub(" \\[YR[0-9]{4}\\]", "", Year))) %>%
# Keep only rows with valid years
filter(!is.na(Year)) %>%
# Replace missing data indicator ".." with NA
mutate(Value = na_if(Value, ".."))
# Aggregate duplicate values before pivoting to wide format
wdi_tidy <- wdi_tidy %>%
group_by(`Country Name`, `Country Code`, Year, `Series Name`) %>%
summarise(Value = mean(as.numeric(Value), na.rm = TRUE), .groups = "drop")
# Reshape the data into wide format: one row per Country-Year,
# and each indicator (Series Name) as a separate column
wdi_tidy <- wdi_tidy %>%
pivot_wider(
names_from = `Series Name`,
values_from = Value,
values_fn = mean
) %>%
# Replace any remaining missing data markers for character columns
mutate(across(where(is.character), ~ na_if(., ".."))) %>%
mutate(across(where(is.character), ~ na_if(., ""))) %>%
# Convert NaN values to NA in numeric columns
mutate(across(where(is.numeric), ~ ifelse(is.nan(.), NA, .)))
# Remove columns that consist entirely of NA values
wdi_tidy <- wdi_tidy %>%
select(where(~ !all(is.na(.))))
wdi_tidy <- wdi_tidy %>% rename(ISO3 = `Country Code`)
merged_data <- full_join(merged_index_data, wdi_tidy, by = c("ISO3", "Year"))
# Export the merged economic data to CSV
write_csv(merged_index_data, "merged_index_data.csv")
# Export the tidy WDI data to CSV
write_csv(wdi_tidy, "wdi_tidy.csv")
# Merge the economic data with the WDI data on ISO3 and Year
merged_data <- full_join(merged_index_data, wdi_tidy, by = c("ISO3", "Year"))
View(merged_data)
# Merge the economic data with the WDI data on ISO3 and Year
merged_data <- full_join(merged_index_data, wdi_tidy, by = c("ISO3", "Year"))
write_csv(merged_data, "merged_data.csv")
merged_data <- merged_data %>%
mutate(Country = coalesce(Country.y, Country.x)) %>%  # Create/replace Country using Country.y first, if available
select(-Country.x, -Country.y)                         # Drop the duplicate columns
merged_data <- merged_data %>%
mutate(Country = coalesce(Country.y, Country.x)) %>%  # Create/replace Country using Country.y first, if available
select(-Country.x, -Country_Name.y)                         # Drop the duplicate columns
merged_data <- merged_data %>%
mutate(Country = coalesce(Country.y, Country_Name.x)) %>%  # Create/replace Country using Country.y first, if available
select(-Country.x, -Country.y)                         # Drop the duplicate columns
merged_data <- merged_data %>%
mutate(Country = coalesce(Country_Name.y, Country.x)) %>%  # Create/replace Country using Country.y first, if available
select(-Country.x, -Country.y)                         # Drop the duplicate columns
merged_data <- merged_data %>%
mutate(Country = coalesce(Country Name.y, Country.x)) %>%  # Create/replace Country using Country.y first, if available
